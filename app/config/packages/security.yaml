security:

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
        ROLE_ADMIN: ROLE_MEDIC
        ROLE_MEDIC: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    providers:
        user_email_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            lazy: true
            pattern: ^/admin
            provider: user_email_provider
            form_login:
                login_path: admin_login
                check_path: admin_login
                enable_csrf: true
                default_target_path: admin_main_page
            logout:
                path: admin_logout
                target: admin_login
#        web:
#            lazy: true
#            provider: user_email_provider
#            form_login:
#                login_path: web_login
#                check_path: web_login
#                enable_csrf: true
#            logout:
#                path: web_logout
#                target: web_main_page


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
